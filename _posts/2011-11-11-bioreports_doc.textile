---
layout: report
title: Using BioReports
analyst: jfv
researcher: bio
pi: bio
categories: 
- biocore
data:
- data/bioreports_doc
---

h2. Textile Basics

BioReport reports are built using a markup language called "Textile". This markup is then converted to html when the report is published. While we could write our reports in straight html, report creation would become very tedious, very quickly. Using Textile (along with some custom components as described below) allows us to create attractive, complex reports with a minimal amount of markup. 

This document itself was created in Textile "View its source here":https://raw.github.com/vlandham/bioreports/master/_posts/2011-11-11-bioreports_doc.textile .

For a full description of all that Textile can do, see the "Textile Reference from RedCloth":http://redcloth.org/textile (RedCloth is the ruby gem BioReports uses to render the Textile files).

Here, we review the most useful of Textile's markup

h2. Headers

Headers separate different sections of your report. Create a header by using the following notation:

<pre>
 h#. Header Text
</pre>

Where @#@ is a number, from 1 - 6. Example:

<pre>
 h3. Sub-Heading
</pre>

Produces:

h3. Sub-Heading

-----

*NOTE*

<div class="note">
Use @h2.@ headers for first level sections and @h3.@ headers for sub-sections.
</div>

h2. Images

Images are defined by providing the path to the image in the @data@ directory, surrounded by @!@. You can provide one of the following size classes:
* @thumb@ - 150px wide
* @small@ - 300px wide
* @medium@ - 600px wide
* @large@ - 900px wide

Here are some examples:

<pre>
!(medium)data/bioreports_doc/per_base_quality.png!
</pre>

Makes:

!(medium)data/bioreports_doc/per_base_quality.png!

<pre>
!(small)data/bioreports_doc/bad_reads.png!
</pre>

Creates:

!(small)data/bioreports_doc/bad_reads.png!

You can add a link to the image by adding a @:@ to the end of the image url, after the closing @!@, and then providing the link. For example, an image that links to itself can be created using:

<pre>
!(small)data/bioreports_doc/per_base_quality.png!:data/bioreports_doc/per_base_quality.png
</pre>

Which will create:

!(small)data/bioreports_doc/per_base_quality.png!:data/bioreports_doc/per_base_quality.png

h3. Image Shortcut

You can use the @image_link@ liquid tag to create a link to an image. With this tag, you provide just the image name (excluding the relative path to the image). @image_link@ uses the data folder naming convention specified by bioreports to figure out where the image is.

*Example:*

<pre>
{_% image_link per_base_quality.png %}
</pre>

Produces:

{% image_link per_base_quality.png %}

You can also specify what class to apply to the image. The syntax is demonstrated in this next example:

<pre>
{_% image_link per_base_quality.png class = small %}
</pre>

{% image_link per_base_quality.png class = small %}

Note that @image_link@ creates an image that links to the full-sized image. 

If an image cannot be found in the data directory for this report, you should see:

{% image_link invalid.png class = small %}



h2. Other Useful Markup

Checkout the documentation's pages on "bolding and italics":http://redcloth.org/textile/phrase-modifiers/ , as well as "lists":http://redcloth.org/textile/page-layout/#bullet-lists for other markup you will probably want to use.

h2. Data

h3. Note

The code below uses @{_%@ as the start of the tag for links, etc. However, it should really be just @{@ and @%@ without the @_@ in between. This was done to prevent BioReports from trying to parse these tags and render the contents.

These tags that are surrounded by the bracket and percent sign are known as *liquid tags*. Liquid tags allow BioReports to add more complicated functionality to pages, as they can be used to call ruby scripts or provide for other modifications. If you are interested, checkout some of the "default liquid tags":https://github.com/shopify/liquid/wiki/liquid-for-designers you can use. Below, we cover custom BioReports liquid tags that will be used frequently during report creation.

h3. External File Links

For adding links to a file path for all supported operating systems. Use the @file_links@ tag like so:

<pre>
 {_% file_links [UNIX/PATH/TO/FILE] %}
</pre>

For example:

<pre>{_% file_links /n/facility/Bioinformatics/analysis/Mak/Mak-2010-01-13_hym/reanalysis/igv_session.xml %} </pre>

Produces: 

{% file_links /n/facility/Bioinformatics/analysis/Mak/Mak-2010-01-13_hym/reanalysis/igv_session.xml %}

Also, should work on directories:

{% file_links /n/projects/jfv/collab %}

Currently works on the following root paths:

{% highlight bash %}
/n/facility
/n/projects
/n/data1
/n/analysis
{% endhighlight %}

h3. Data Grids

A data grid is a separate page you can associate with your report to display large tsv or csv files.

First, put the @.csv@ or @.tsv@ file into your @data/@ directory.

Then use the @data_grid@ tag to create a button in your report that links to a display of your data file:

<pre>{_% data_grid data/bioreports_doc/sample_223b.snps.filtered.unique.short.csv %}</pre>

Produces:

{% data_grid data/bioreports_doc/sample_223b.snps.filtered.unique.short.csv %}

Data Grids can handle very large files because they show one page of data at a time. Filtering and other data modifications work on the entire data set, but then the data is split over pages for displaying purposes.

h4. Row Limit

By default, @100@ rows are displayed in a data grid at a time. You can modify this by supplying the @limit@ parameter to the @data_grid@ tag.

<pre>{_% data_grid data/bioreports_doc/sample_223b.snps.filtered.unique.short.csv limit = 50 %}</pre>

Produces:

{% data_grid data/bioreports_doc/sample_223b.snps.filtered.unique.short.csv limit = 50 %}

h4. Chart Display

A data grid has some interesting features. One feature is the ability to display a chart based view of numerical data. If you don't like this feature, set @chart_display@ to false

<pre>{_% data_grid data/bioreports_doc/sample_223b.snps.filtered.unique.short.csv limit = 50, chart_display = false %}</pre>

Produces:

{% data_grid data/bioreports_doc/sample_223b.snps.filtered.unique.short.csv limit = 50, chart_display = false %}

h4. Pagination Links

By default, links to the different pages of data show up on the bottom of the page. You can optionally turn on top of the page pagination links using @page_top@

<pre>{_% data_grid data/bioreports_doc/sample_223b.snps.filtered.unique.short.csv limit = 50, chart_display = false, page_top = true %}</pre>

Produces:

{% data_grid data/bioreports_doc/sample_223b.snps.filtered.unique.short.csv limit = 50, chart_display = false, page_top = true %}

h2. Tables

The @table@ tag embeds a pretty table in your report with the data following this tag. Use @endtable@ to indicate the end of your data set. The @table@ tag has a input that can either be @tsv@ or @csv@ to specify the type of input data you are using.

h3. A Tab Separated Table

This table is generated from text copied and pasted from Excel:

<pre>
{_% table tsv %}
	42B1	67A1
Total Number of Mutations found	428	559
Intergenic mutations	201	290
intronic mutations	134	188
exonic mutations	93	81
synonymous mutations	28	25
nonsense mutations	5	2
missense/exonic mutations	55	67
{_% endtable %}
</pre>

Generates:

{% table tsv %}
	42B1	67A1
Total Number of Mutations found	428	559
Intergenic mutations	201	290
intronic mutations	134	188
exonic mutations	93	81
synonymous mutations	28	25
nonsense mutations	5	2
missense/exonic mutations	55	67
{% endtable %}

h3. A CSV Table

Similarly, for @csv@ input, you would use:

<pre>
{_% table csv %}
Sample, hjIs21 all, hjIs21 unique, huy116 all, huy116 unique
Total SNPS, 1238, 233, 175, 599
Intergenic,  570,  127,  792,  274 
Synonymous, 164,  27,  173,  61 
Non-Synonymous, 321, 69, 330, 106
{_% endtable %}
</pre>

Which creates:

{% table csv %}
Sample, hjIs21 all, hjIs21 unique, huy116 all, huy116 unique
Total SNPS, 1238, 233, 175, 599
Intergenic,  570,  127,  792,  274 
Synonymous, 164,  27,  173,  61 
Non-Synonymous, 321, 69, 330, 106
{% endtable %}

h3. Styling Tables

The default table style looks pretty good - but is not appropriate for all table types. You can specify a set of classes to apply to the table, which can then be used to style the table, by using the @class = @ 

Try @class = grid@, like this:

<pre>
{_% table tsv class = grid %}
	UMR_10ng	UMR_100ng	UMR_1ug
UMR_10ng	100%	97%	82%
UMR_100ng	97%	100%	92%
UMR_1ug	82%	92%	100%
{_% endtable %}
</pre>

Which produces this:
{% table tsv class = grid %}
	UMR_10ng	UMR_100ng	UMR_1ug
UMR_10ng	100%	97%	82%
UMR_100ng	97%	100%	92%
UMR_1ug	82%	92%	100%
{% endtable %}

h4. Class option:

Right now, tables can have the following classes, in addition to the default, fancy class:

* @grid@
* @simple@

More classes can be added easily, for different styling options.

h3. A Raw HTML Table

You can also use raw html, just using the appropriate classes:

{% highlight html %}
<table class="simple">
<thead>
<tr><td>Path</td><td>Sample</td></tr>
</thead>
<tbody>
<tr><td>/n/analysis/Mak/hym/Mak-2010-12-10/429GDAAXX/s_1_1_sequence.txt.gz </td><td> hjls21_1 Read 1 </td>
</tbody>
</table>
{% endhighlight %}

Makes:

<table class="simple">
<thead>
<tr><td>Path</td><td>Sample</td></tr>
</thead>
<tbody>
<tr><td>/n/analysis/Mak/hym/Mak-2010-12-10/429GDAAXX/s_1_1_sequence.txt.gz </td><td> hjls21_1 Read 1 </td>
</tbody>
</table>


h2. Custom Divs

Sections can be distinguished from the rest of the report by surrounding them with a classed div. For example, the @note@ class could be used like this:

{% highlight html %}
<div class="note">
*NOTE*
...
</div>
{% endhighlight %}

To produce something like this:

<div class="note">
*Note on IGV Session*

The reference genome used for this analysis is not built into the default set of IGV genomes as of version 2.0.5. For this reason, it will be necessary to add the ws210 c. elegans genome to your IGV browser. Steps for doing this are provided below

* With IGV open, select File -> Load Genome
* Navigate to the custom genome path:
** S:\Bioinformatics\analysis\Mak\Mak-2010-01-13_hym\reanalysis\ce_ws210.genome
* Select open with the ce_ws210.genome file selected. This should add it to your IGV browser.
</div>

h2. Image Grid

The @image_grid@ tag can be used to create a table of images. With no additional parameters, @image_grid@ puts each image provided in its own column:

<pre>
{_% image_grid %}
1.png
2.png
3.png
{_% endimage_grid %}
</pre>

{% image_grid %}
1.png
2.png
3.png
{% endimage_grid %}

You can also specify how many columns the grid should be made out of:

<pre>
{_% image_grid 1 %}
1.png
2.png
3.png
{_% endimage_grid %}
</pre>

{% image_grid 1 %}
1.png
2.png
3.png
{% endimage_grid %}

The @thumb@ class is applied to the images inside the image grid by default. use the @class =@ option to specify what class to apply to the images.

<pre>
{_% image_grid 2 class = medium %}
1.png
2.png
3.png
{_% endimage_grid %}
</pre>

{% image_grid 2 class = small %}
1.png
2.png
3.png
{% endimage_grid %}

<pre>
{_% image_grid class = small %}
1.png
2.png
3.png
{_% endimage_grid %}
</pre>

{% image_grid class = small %}
1.png
2.png
3.png
{% endimage_grid %}

Invalid Image

{% image_grid class = small %}
invalid.png
{% endimage_grid %}

h2. Toggle Divs

h3(section_toggle details). Technical Details

<div class="details section collapsed">

{% highlight bash %}
# bwa location /path/to/bwa/bwa
bwa -e 23 --flail T -in /n/analysis/mak/1_1_fastq.gz
# GATK vs 1.1.10
{% endhighlight %}

</div>
